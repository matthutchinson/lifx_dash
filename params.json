{
  "name": "Lifx dash",
  "tagline": "Toggle LIFX lights with an Amazon Dash button",
  "body": "`lifx_dash` is a simple command-line tool to monitor your network for [Amazon\r\nDash button](https://www.amazon.com/Dash-Buttons/b?ie=UTF8&node=10667898011)\r\npresses and toggle [LIFX](http://www.lifx.com) lights ON and OFF. The tool\r\nprovides two commands, `monitor` and `snoop`.\r\n\r\nUse `snoop` to listen for Dash presses on your network, and identify the\r\nbutton's MAC address.\r\n\r\nUse `monitor` (with a MAC address and LIFX HTTP API token) to respond to\r\npresses, and toggle your lights ON and OFF. You can optionally pass a bulb\r\nselector, or choose to daemonize the `monitor` process.\r\n\r\nA `config` command also exists, allowing you to set default options for\r\n`monitor` and `snoop`.\r\n\r\n## Requirements\r\n\r\n`lifx_dash` requires at least one LIFX bulb, and any Amazon Dash button. You\r\nwill also need a wifi network and root access to sniff packets on your network\r\nadaptor.\r\n\r\nThis gem uses [packet_fu](https://rubygems.org/gems/packetfu) which in turn\r\nrequires the [libpcap](http://www.tcpdump.org) library. This is probably already\r\navailable on your machine, if not download the [latest\r\nrelease](http://www.tcpdump.org/#latest-release) or install with your package\r\nmanager e.g.:\r\n\r\n    sudo apt-get install libpcap0.8-dev  # UNIX\r\n    brew install libpcap                 # homebrew on OSX\r\n\r\n`lifx_dash` is distributed via [RubyGems](https://rubygems.org) and requires\r\n[Ruby](https://www.ruby-lang.org) >= 2.0.0.\r\n\r\n## Installation\r\n\r\n    gem install lifx_dash\r\n\r\nThe `lifx_dash` command will now be available in your PATH.\r\n\r\n### Dash Button Setup\r\n\r\nFollow Amazon's Dash button setup steps, but **stop** before choosing any\r\nparticular product to purchase. If necessary, you can [factory\r\nreset](https://www.amazon.com/gp/help/customer/display.html?nodeId=201746400)\r\nyour button and start the setup from scratch.\r\n\r\nNext use the `snoop` command to determine the button's MAC address:\r\n\r\n    $ sudo lifx_dash snoop -i en0\r\n\r\nThis will listen on network interface 'en0' for ARP packets from any Dash\r\nbutton. Take a note of the MAC address that's logged when you press. To list\r\nnetwork interfaces on your machine use:\r\n\r\n    $ ifconfig\r\n    # or\r\n    $ ifconfig -l\r\n\r\n#### Snooping Tips\r\n\r\nWait for the network to quiet down, before pressing the button, since other\r\ndevices may respond with ARP packets of their own when you press. Take care to\r\nchoose the MAC address from the ARP packet that occurs only once from a single\r\nMAC address.\r\n\r\n### LIFX Bulb Setup\r\n\r\nCreate a [personal token](https://cloud.lifx.com/settings) for the LIFX HTTP\r\nAPI.\r\n\r\nBy default `lifx_dash` will toggle _ALL_ bulbs. To toggle a specific light you\r\nwill need to find the LIFX Bulb ID.\r\n\r\nVisit the LIFX API [list\r\nlights](https://api.developer.lifx.com/docs/list-lights) doc and use the 'Try It\r\nOut' form with your token. Details for all bulbs on your network will be shown\r\nalong with their IDs (in JSON format).\r\n\r\nOr call the API directly with this curl command:\r\n\r\n    $ curl \"https://api.lifx.com/v1/lights/all\" -H \"Authorization: Bearer LIFX_API_TOKEN\"\r\n\r\n## Usage\r\n\r\nTo start the `lifx_dash` monitor:\r\n\r\n    $ sudo lifx_dash monitor --token=LIFX_API_TOKEN --mac-address=DASH_MAC_ADDRESS --selector='all' --iface=en0\r\n    Starting lifx_dash monitor ...\r\n\r\nThis starts a long-running process listening on 'en0', for button presses (from\r\nthe given MAC address). When a press occurs, the monitor will toggle all LIFX\r\nbulbs.\r\n\r\nOnly the `--mac-address` and `--token` options are required, by default\r\n`--selector=all` and `--iface=en0`. You can also use short-form flag options\r\nlike so:\r\n\r\n    $ sudo lifx_dash monitor -t LIFX_API_TOKEN -m DASH_MAC_ADDRESS -s 'all' -i en0\r\n\r\n### Running as a Daemon\r\n\r\nUse the `-d` switch (or `--daemonize`) to run `monitor` as a daemon:\r\n\r\n    $ sudo lifx_dash monitor -t LIFX_API_TOKEN -m DASH_MAC_ADDRESS -s 'all' -i en0 -d\r\n    [17099] Starting lifx_dash ... (daemon logging to /tmp/lifx_dash.log)\r\n\r\nThe command will log to `/tmp/lifx_dash.log` by default (creating the file and\r\nfolder if it does not exist). Use `-l` or `--log-file` to override this\r\nlocation.\r\n\r\n## Configuration\r\n\r\nYou can save option defaults using the `config` command:\r\n\r\n    $ lifx_dash config\r\n    Configuring lifx_dash ...\r\n\r\nYou will be prompted for values for each option and your choices will be stored\r\nat `~/.lifx_dash.rc.yml`.\r\n\r\nAn empty answer will mean no value is set, and the option reverts to it's\r\ndefault. Passing options on the command-line always takes precedence over\r\nyour saved configuration.\r\n\r\nYou can inspect the current configuration file options with:\r\n\r\n    $ lifx_dash config --show\r\n\r\n## Help\r\n\r\nYou can get help in number of ways, for example:\r\n\r\n    $ lifx_dash help\r\n    $ lifx_dash help monitor\r\n    $ lifx_dash snoop -h\r\n    $ lifx_dash config --help\r\n\r\nThe gem also comes packaged with its own [man\r\npage](http://htmlpreview.github.io/?https://raw.githubusercontent.com/matthutchinson/lifx_dash/master/man/lifx_dash.1.html).\r\nYou'll need [gem-man](https://github.com/defunkt/gem-man) to view this from your\r\ncommand line.\r\n\r\n## Troubles?\r\n\r\nIf you think something is broken or missing, do raise a new\r\n[issue](https://github.com/matthutchinson/lifx_dash/issues). Please remember to\r\ntake a moment and check it hasn't already been raised (and possibly closed).\r\n\r\n## What does the code do?\r\n\r\nThis gem uses the [PacketFu](https://rubygems.org/gems/packetfu) gem (and\r\n[libpcap](https://sourceforge.net/projects/libpcap/) under the hood) to monitor\r\ndata packets on your network. This packet stream is filtered by\r\n[ARP](https://en.wikipedia.org/wiki/Address_Resolution_Protocol) packets (sent\r\nwhen a device attempts to identify itself). Amazon Dash buttons do this on every\r\npress.\r\n\r\nWhen an ARP packet is detected with a known source MAC address, the LIFX HTTP\r\nAPI [toggle-power](https://api.developer.lifx.com/docs/toggle-power) endpoint is\r\nrequested, with a selector and authorization header.\r\n\r\nThe [GLI](http://naildrivin5.com/gli/) command line framework is used to define\r\nthe commands and options.\r\n[MiniTest](https://rubygems.org/gems/minitest/versions/5.7.0) and\r\n[Aruba](https://rubygems.org/gems/aruba) are used for testing.\r\n\r\n## Contributing\r\n\r\nBug [reports](https://github.com/matthutchinson/lifx_dash/issues) and [pull\r\nrequests](https://github.com/matthutchinson/lifx_dash/pulls) are welcome on\r\nGitHub.\r\n\r\nWhen submitting pull requests, please remember to add tests covering the new\r\nbehaviour, and ensure all tests are passing on [Travis\r\nCI](https://travis-ci.org/matthutchinson/lifx_dash). Read the [contributing\r\nguidelines](https://github.com/matthutchinson/lifx_dash/blob/master/CONTRIBUTING.md)\r\nfor more details.\r\n\r\nThis project is intended to be a safe, welcoming space for collaboration, and\r\ncontributors are expected to adhere to the [Contributor\r\nCovenant](http://contributor-covenant.org) code of conduct. See\r\n[here](https://github.com/matthutchinson/lifx_dash/blob/master/CODE_OF_CONDUCT.md)\r\nfor more details.\r\n\r\n## Development\r\n\r\nAfter checking out the repo, run `bin/setup`, this will install dependencies,\r\nand re-generate the man page and docs. Then, run `bundle exec rake` to run all\r\ntests (and generate a coverage report). You can run unit or feature tests\r\nseparately with:\r\n\r\n    bundle exec rake test\r\n    bundle exec rake features\r\n\r\nYou can also run `bin/console` for an interactive prompt that will allow you to\r\nexperiment with the gem code.\r\n\r\n## Future Work\r\n\r\nWork in progress is usually mentioned at the top of the\r\n[CHANGELOG](https://github.com/matthutchinson/lifx_dash/blob/master/CHANGELOG.md).\r\nIf you'd like to get involved in contributing, here are some ideas:\r\n\r\n* Validation of all command line flag values, iface/mac/token etc.\r\n* More unit test coverage\r\n* Aruba features covering the happy paths for all commands\r\n* Smarter config, auto-snoop, list bulbs with names and choose id\r\n* Show existing values in config, when configuring, allowing edits (with readline)\r\n* More Rdoc documentation on command classes\r\n* New optional flag for the configuration file location\r\n* Handle CTRL-C and kill signals with better exit/cleanup messages\r\n* Use LIFX LAN API (with a command switch to choose LAN/HTTP)\r\n\r\n## License\r\n\r\nThe gem is available as open source under the terms of the [MIT\r\nLicense](http://opensource.org/licenses/MIT).\r\n\r\n## Links\r\n\r\n* [Travis CI](http://travis-ci.org/matthutchinson/lifx_dash)\r\n* [Test Coverage](https://coveralls.io/r/matthutchinson/lifx_dash?branch=master)\r\n* [Code Climate](https://codeclimate.com/github/matthutchinson/lifx_dash)\r\n* [RDoc](http://rdoc.info/projects/matthutchinson/lifx_dash)\r\n* [Wiki](http://wiki.github.com/matthutchinson/lifx_dash/)\r\n* [Issues](http://github.com/matthutchinson/lifx_dash/issues)\r\n* [Report a bug](http://github.com/matthutchinson/lifx_dash/issues/new)\r\n* [Gem](http://rubygems.org/gems/lifx_dash)\r\n* [GitHub](http://github.com/matthutchinson/lifx_dash)\r\n\r\n## Who's Who?\r\n\r\n* [LifxDash](http://github.com/matthutchinson/lifx_dash) by [Matthew Hutchinson](http://matthewhutchinson.net)\r\n* Inspired by this [hack](http://tinyurl.com/zba3da2) from [Ted Benson](https://twitter.com/edwardbenson)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}